{"version":3,"sources":["component/Login.js","component/Popup.js","component/SearchResult.js","component/Contexts.js","component/Search.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","handleUserName","e","setState","userName","target","value","handlePassword","password","login","a","fetch","method","headers","response","json","data","results","some","el","name","state","birth_year","setUser","history","push","userFound","console","error","className","type","placeholder","this","onChange","onClick","React","Component","withRouter","Popup","planetInfo","handleClose","showHideClassName","show","Object","keys","map","key","SearchResult","maxPopulation","planets","useState","setModel","setInfo","planet","index","showModal","population","RootContext","createContext","Search","timer","timeLeft","clearInterval","search","count","setInterval","filterPlanets","filter","toLowerCase","includes","logout","then","resp","length","reduce","prev","current","parseInt","to","Consumer","context","id","aria-hidden","App","setUserName","user","log","Provider","exact","component","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.43074cea.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            userName: \"\",\r\n            password: \"\",\r\n            userFound: true,\r\n            \r\n        }\r\n    }\r\n\r\n    /**\r\n   * \r\n   *@discription - This function is to set User Name\r\n   @param {String} e - Target value of user\r\n   */\r\n\r\n    handleUserName = (e) => {\r\n        this.setState({ userName: e.target.value })\r\n    }\r\n\r\n    /**\r\n   * \r\n   *@discription - This function is to set Password of user\r\n   @param {String} e - Target value of Password\r\n   */\r\n    handlePassword = (e) => {\r\n        this.setState({ password: e.target.value })\r\n    }\r\n\r\n\r\n    /**\r\n   * \r\n   *@discription - This function is to Login user after successfull username and password\r\n   */\r\n    login = async () => {\r\n        try {\r\n            const response = await fetch(\"https://swapi.co/api/people\", {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            const data = await response.json();\r\n            const found = data.results.some(el => el.name === this.state.userName && el.birth_year === this.state.password);\r\n            if (found) {\r\n                this.props.setUser(this.state.userName)\r\n                this.props.history.push('/Search')\r\n            }else{\r\n                this.setState({ userFound: false })\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n   * \r\n   *@discription - This function is will render the jsx of Login form\r\n   */\r\n    render() {\r\n        return (\r\n            <div className=\"login-page\">\r\n                <div className=\"form\">\r\n                    <input type=\"text\" placeholder=\"username\" value={this.state.userName} onChange={this.handleUserName} />\r\n                    <input type=\"password\" placeholder=\"password\" value={this.state.password} onChange={this.handlePassword} />\r\n                    <button onClick={this.login} >login</button>\r\n                </div>\r\n                {!this.state.userFound && <div className=\"error\">User id or password is incorrect</div>\r\n}            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter (Login)","import React from 'react';\r\n   /**\r\n   * \r\n   *@discription - This function will return the jsx of model popup\r\n   @param planetInfo -Object of planet selected\r\n    @param handleClose -function to close popup\r\n     @param show -variable to show and hide popup\r\n     @return {String} - returns the jsx code of the popup\r\n   */\r\nexport const Popup = ({ planetInfo, handleClose, show }) => {\r\n    let showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\r\n    return (\r\n        <div className={showHideClassName}>\r\n            <section className=\"modal-main\">\r\n                <h2>Planet</h2>\r\n                <div className=\"planet-info\">\r\n                    {planetInfo && Object.keys(planetInfo).map(function (key) {\r\n                        return (\r\n                            <>\r\n                                <span><strong>{key}</strong></span>\r\n                                <span >{planetInfo && planetInfo[key]}</span>\r\n                            </>\r\n                        )\r\n                    })}\r\n                </div>\r\n                <button className=\"button-close\" onClick={handleClose}>close</button>\r\n            </section>\r\n        </div>\r\n    );\r\n};","import React, { useState } from 'react';\r\nimport { Popup } from './Popup'\r\nexport const SearchResult = ({ maxPopulation, planets }) => {\r\n\r\n    const [show, setModel] = useState(false);\r\n    const [planetInfo, setInfo] = useState(null);\r\n\r\n    /**\r\n    * \r\n    *@discription - This function will show model on cliking the row of the table\r\n    @param planet -Object of planet selected\r\n    */\r\n    function showModal(planet) {\r\n        setModel(true)\r\n        setInfo(planet)\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Popup show={show} planetInfo={planetInfo} handleClose={() => setModel(false)} />\r\n\r\n            <div className=\"grid\">\r\n                {planets && <div className=\"header\">\r\n                    <span className=\"search-head\"><strong>Name</strong></span>\r\n                    <span className=\"search-head\"><strong>Population</strong></span>\r\n                </div>}\r\n                {planets && planets.map((planet, index) => {\r\n                    return (\r\n                        <div key = {index} className={`grid-container ${maxPopulation.name === planet.name ? \"active\" : \"\"}`} onClick={() => showModal(planet)}>\r\n                            <span >{planet.name}</span>\r\n                            <span>{planet.population}</span>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\n\r\nconst RootContext = React.createContext({\r\n    userName: \"\",\r\n})\r\nexport default RootContext","import React from 'react';\r\nimport { SearchResult } from './SearchResult'\r\nimport { Redirect } from 'react-router-dom'\r\nimport RootContect from './Contexts'\r\nclass Search extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            planets: [],\r\n            filterPlanets: [],\r\n            logout: false,\r\n            count:0,\r\n            timeLeft:60\r\n        }\r\n    }\r\n\r\n    /**\r\n   * \r\n   *@discription - This function is will fetch the value of all the planet\r\n   */\r\n    componentDidMount() {\r\n        try {\r\n            fetch(\"https://swapi.co/api/planets\", {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }).then((resp) => resp.json())\r\n                .then((data) => {\r\n                    this.setState({ planets: data.results })\r\n                });\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n   * \r\n   *@discription - This function is for timer to check number of count in a minute\r\n   @param e- Target value of the search box\r\n   */\r\n    \r\n   timer = ()=> {\r\n    this.setState({timeLeft:this.state.timeLeft-1})\r\n    if(this.state.timeLeft == 0){\r\n        clearInterval(this.timer)   \r\n    }\r\n   }\r\n   \r\n  /**\r\n   * \r\n   *@discription - This function is will fetch the value of all the planet\r\n   @param e- Target value of the search box\r\n   */\r\n    search = (e,userName) => {\r\n        let search = e.target.value;\r\n        const { planets,count } = this.state;\r\n        if(count === 0){\r\n            this.timer = setInterval(this.timer,1000);\r\n          }\r\n        if (search !== \"\" && this.state.timeLeft !==0 && count<14  || userName === \"Luke Skywalker\") {\r\n            let filterPlanets = planets.filter((planet) => {\r\n                return planet.name.toLowerCase().includes(search.toLowerCase())\r\n            })\r\n            this.setState({ filterPlanets: filterPlanets,count:count+1 })\r\n        }  else if(this.state.timeLeft === 0){\r\n            this.setState({count:0,timeLeft:60})\r\n        }else {\r\n            this.setState({ filterPlanets: [] ,count:count+1})\r\n        }\r\n       \r\n\r\n    }\r\n\r\n   /**\r\n   * \r\n   *@discription - This function will logout user\r\n   */\r\n    logout = () => {\r\n        this.setState({ logout: true })\r\n    }\r\n\r\n   /**\r\n   * \r\n   *@discription - This function will render the jsx of search form\r\n   */\r\n    render() {\r\n        const maxPopulation = this.state.filterPlanets.length !== 0 && this.state.filterPlanets.reduce(function (prev, current) {\r\n            return (parseInt(prev.population) > parseInt(current.population)) ? prev : current\r\n        })\r\n        if (this.state.logout) {\r\n            return <Redirect to='/' />;\r\n        }\r\n        return (\r\n            <RootContect.Consumer>\r\n                {context => (\r\n                       <div className=\"main-container\">\r\n                       <button onClick={this.logout} className=\"logout\">Logout</button>\r\n                       <div className=\"search-container\">\r\n                               <input type=\"text\" id=\"search-bar\" placeholder=\"Search Planet....\" onChange={(e)=>this.search(e,context.userName)} />\r\n                           <i className=\"fa fa-search search-icon\" aria-hidden=\"true\"></i>\r\n                       </div>\r\n                       {this.state.count == 14 && <div className=\"error\">Only 15 serches Allowed in a minute</div>}\r\n                       {this.state.filterPlanets.length !== 0 && <SearchResult maxPopulation={maxPopulation} planets={this.state.filterPlanets} />}\r\n                   </div>\r\n                )}\r\n         </RootContect.Consumer>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Search","import React,{useState} from 'react';\nimport Login from '../src/component/Login'\nimport './App.css';\nimport Search from '../src/component/Search'\nimport '../src/css/style.css'\n\nimport {\n  HashRouter as Router,\n  Route\n} from \"react-router-dom\";\nimport RootContext from './component/Contexts'\nconst App = () => {\n  const [userName,setUserName] = useState(\"\")\n  function setUser(user){\n    console.log(\"userName\",user)\n    setUserName(user)\n  }\n  \n  return (\n    <div className=\"App\">\n      <Router>\n        <RootContext.Provider value={{userName:userName} }>\n        <Route exact component={()=><Login setUser = {setUser}/>} path='/' />\n          <Route component={Search} path='/Search' />\n          </RootContext.Provider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}